{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This package makes it easier to store and retrieve secrets. Suppose you're developing a python package that needs to access external API services. To test the package, you need to be able to load your API key, but users of your package should sign up to get their own API key. One way to circumvent this is to create something like the following directory structure:</p> <pre><code>my_package/\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 ...\nsecrets.yaml\n.gitignore\n</code></pre> <p>And then in your <code>.gitignore</code> add <code>secrets.yaml</code>.</p> <p>There are two main drawbacks to this approach (or any other similar approach):</p> <ol> <li>You might accidentally commit the secrets anyways (say if you revert to a branch where <code>secrets.yaml</code> was not in the gitignore and then commit).</li> <li>You can't access these secrets from other projects.</li> </ol> <p>This package addresses both of these issues.</p> <p>Note</p> <p>Currently this package does not offer major security benefits over simply using global environment variables, although it is ideally easier to use. Future versions will incorporate enhanced security measures, time permitting.</p>"},{"location":"cli/","title":"CLI","text":""},{"location":"cli/#secrets","title":"secrets","text":"<p>Usage:</p> <pre><code>secrets [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#copy","title":"copy","text":"<p>Copy a secret key to your clipboard.</p> <p>Usage:</p> <pre><code>secrets copy [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--interactive</code>, <code>-i</code> / <code>--arguments</code>, <code>-a</code> boolean Interactive mode or arguments mode. <code>True</code> <code>--uid</code>, <code>-u</code> text Secret UID. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#forget","title":"forget","text":"<p>Forget (ie: delete) a secret.</p> <p>Usage:</p> <pre><code>secrets forget [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--interactive</code>, <code>-i</code> / <code>--arguments</code>, <code>-a</code> boolean Interactive mode or arguments mode. <code>True</code> <code>--uid</code>, <code>-u</code> text Pass a secrets uid to forget it. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#keep","title":"keep","text":"<p>Keep (ie: save) a new secret.</p> <p>Usage:</p> <pre><code>secrets keep [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--interactive</code>, <code>-i</code> / <code>--arguments</code>, <code>-a</code> boolean Interactive mode or arguments mode. <code>True</code> <code>--overwrite</code>, <code>-o</code> / <code>--no-overwrite</code>, <code>-no</code> boolean If a secret with the same name exists, overwrite it. <code>False</code> <code>--uid</code>, <code>-u</code> text The uid of the secret to save. None <code>--key</code>, <code>-k</code> text The key to save. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#list","title":"list","text":"<p>List secrets in a table.</p> <p>Usage:</p> <pre><code>secrets list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#view","title":"view","text":"<p>View the key for a secret.</p> <p>Usage:</p> <pre><code>secrets view [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--interactive</code>, <code>-i</code> / <code>--arguments</code>, <code>-a</code> boolean Interactive mode or arguments mode. <code>True</code> <code>--uid</code>, <code>-u</code> text Secret UID. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#installation","title":"Installation","text":"pippoetryconda <pre><code>pip install python-simple-secrets-manager\n</code></pre> <pre><code>poetry add python-simple-secrets-manager\npoetry install\n</code></pre> <pre><code>conda create -n pssm python=3.11 -y\nconda activate pssm\npip install python-simple-secrets-manager\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":"<p>You can test to make sure it has successfully installed with:</p> <pre><code>secrets --version\n</code></pre> <p>Which should return this output:</p> <pre><code>python-simple-secrets-manager, version [number]\n</code></pre> <p>You can now add a secret. You will be prompted to specify the uid and key.</p> <pre><code>secrets keep\n</code></pre> <p>Then, if you want to access the secret from within python, just make sure the package is installed and get the secret by the uid set earlier.</p> <pre><code>from pssm import secrets\ntoken = secrets.get(\"secret_uid\")\n</code></pre> <p>More details on other available commands/methods can be found in the tutorial notebook.</p>"},{"location":"tutorial/","title":"Tutorial","text":"In\u00a0[1]: Copied! <pre># uncomment this line to install the package\n# ! pip install python-simple-secrets-manager\n</pre> # uncomment this line to install the package # ! pip install python-simple-secrets-manager <p>You can check that the package is installed with the following CLI command. Note that prepending an exclamation point to a command in jupyter executes the command in your shell.</p> In\u00a0[2]: Copied! <pre>! secrets --version\n</pre> ! secrets --version <pre>python-simple-secrets-manager, version 0.1.1\n</pre> <p>By default the package will create a <code>secrets.toml</code> file in a <code>.secrets</code> directory in your home folder, which is where data is stored.</p> In\u00a0[3]: Copied! <pre># package import\nfrom pssm import secrets\n</pre> # package import from pssm import secrets <p>You can add a new secret via the CLI interactively by running <code>secrets keep</code>, however we'll use the argument option in the notebook for all commands.</p> In\u00a0[4]: Copied! <pre>! secrets keep -a --uid example_secret --key 1234\n</pre> ! secrets keep -a --uid example_secret --key 1234 <pre>Using arguments mode leaves secret keys in your terminal history and accordingly\nit is not recommended.\nSecret remembered!\n</pre> <p>You can also do so through the package interface.</p> In\u00a0[5]: Copied! <pre>secrets.keep(uid=\"example_2\", key=\"12345678\")\n</pre> secrets.keep(uid=\"example_2\", key=\"12345678\") <p>View the available secrets through the CLI. (The formatting is only messed up on the website.)</p> In\u00a0[6]: Copied! <pre>! secrets list\n</pre> ! secrets list <pre>                Secrets                 \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 UID                   \u2503 Key          \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 example_secret        \u2502 1***         \u2502\n\u2502 example_2             \u2502 12******     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>Or through the package</p> In\u00a0[7]: Copied! <pre>secrets.uids\n</pre> secrets.uids Out[7]: <pre>['example_secret', 'example_2']</pre> <p>You can get a secret via the CLI either by viewing it with:</p> <ul> <li><code>secrets view</code> -&gt; This will display the secret key in your terminal. By default you will interactively select a secret to view.</li> <li><code>secrets copy</code> -&gt; This will copy the secret key to your clipboard. By default you will interactively select a secret to copy</li> </ul> <p>We can run these in non-interactive mode as follows.</p> In\u00a0[8]: Copied! <pre>! secrets view -a --uid example_secret\n</pre> ! secrets view -a --uid example_secret <pre>example_secret: 1234\nYou should clear your terminal output after viewing secrets like this for \nsecurity reasons.\n</pre> In\u00a0[9]: Copied! <pre>! secrets copy -a --uid example_secret\n</pre> ! secrets copy -a --uid example_secret <pre>Secret key copied to clipboard.\n</pre> <p>Clipboard output: 1234</p> <p>Or alternatively via the package.</p> In\u00a0[10]: Copied! <pre>secrets.get(uid=\"example_secret\")\n</pre> secrets.get(uid=\"example_secret\") Out[10]: <pre>'1234'</pre> In\u00a0[11]: Copied! <pre>secrets.get(uid=\"example_2\")\n</pre> secrets.get(uid=\"example_2\") Out[11]: <pre>'12345678'</pre> <p>Note that the secrets are also added as accessible attributes.</p> In\u00a0[12]: Copied! <pre>secrets.obj.example_secret\n</pre> secrets.obj.example_secret Out[12]: <pre>Secret(uid=example_secret)</pre> In\u00a0[13]: Copied! <pre>secrets.obj.example_secret.key\n</pre> secrets.obj.example_secret.key Out[13]: <pre>'1234'</pre> <p>You can forget a secret by running <code>secrets forget</code> and selecting the secret UIDs to forget, or by passing the uid as an argument.</p> In\u00a0[14]: Copied! <pre>! secrets forget -a --uid example_2\n</pre> ! secrets forget -a --uid example_2 <pre>Secret forgotten!\n</pre> In\u00a0[15]: Copied! <pre>! secrets list\n</pre> ! secrets list <pre>                Secrets                 \n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 UID                       \u2503 Key      \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 example_secret            \u2502 1***     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</pre> <p>If we try to forget that secret again, we get a warning.</p> In\u00a0[16]: Copied! <pre>! secrets forget -a --uid example_2\n</pre> ! secrets forget -a --uid example_2 <pre>Can't seem to find that secret... Make sure that uid exists. (Hint: run 'secrets\nlist' to check).\n</pre> <p>More features will be added in the near future.</p>"},{"location":"tutorial/#tutorial","title":"Tutorial\u00b6","text":"<p>Before going through this tutorial, make sure you install the package. You can do so via pip.</p>"},{"location":"changelog/0.1.0/","title":"0.1.0","text":"<p>Initial PyPi push, this version is broken.</p>"},{"location":"changelog/0.1.1/","title":"0.1.1","text":"<p>Implement basic features documented on initial version of documentation site. Future changelogs will include more information about specific features.</p>"},{"location":"todo/design/","title":"Design","text":""},{"location":"todo/features/","title":"Features","text":""},{"location":"todo/notes/","title":"Notes","text":""},{"location":"todo/notes/#developer","title":"developer","text":""},{"location":"todo/notes/#requirements","title":"requirements","text":"<ul> <li> all utilities mirrored between package and CLI</li> <li>[ ]</li> </ul>"},{"location":"todo/notes/#unstructured","title":"unstructured","text":"<ul> <li>installation</li> <li>usage</li> </ul>"},{"location":"todo/notes/#usage","title":"usage","text":"<p>via cli</p>"},{"location":"todo/notes/#overview","title":"Overview","text":""},{"location":"todo/notes/#links","title":"Links","text":""},{"location":"todo/notes/#edges","title":"Edges","text":""},{"location":"todo/notes/#details","title":"Details","text":"<p>Easier to work with than environment variables, but not particularly secure - though, notably, more secure than <code>env</code> files or tokens in a repository (no risk in accidentally committing secrets). Meant to be used on local machine, cloud solutions generally have secrets management built in. For local token management demanding security, alternative token management and/or SSO solutions should be used instead.</p>"},{"location":"todo/notes/#links_1","title":"links","text":"<ul> <li>chat: Token Dataclass Best Practices ^2d4ccd</li> </ul>"},{"location":"todo/notes/#features","title":"features","text":""},{"location":"todo/notes/#backlog","title":"backlog","text":"<ul> <li> token groups</li> <li> custom token directories for user packages</li> <li> support for non-unix systems<ul> <li> query: does <code>.[name]</code> work in windows?</li> </ul> </li> <li> gather timezone info</li> </ul>"},{"location":"todo/notes/#task","title":"task","text":"<ul> <li> use existing token manager from [[yield.tool.package.python &gt; sunkcosts]]</li> </ul>"},{"location":"todo/notes/#backlog_1","title":"backlog","text":"<ul> <li> separate out [[yield.tool.package.python &gt; rich terminal utils]] and use this</li> <li> use [[yield.tool.package.python &gt; pyeio]] for data io operations</li> <li> review and implement features from chat if necessary</li> </ul>"},{"location":"todo/notes/#unsorted","title":"unsorted","text":""},{"location":"todo/notes/#todos","title":"todos","text":"<ul> <li>token rotatation period</li> <li>token expiration period</li> <li>add token to environment variables<ul> <li>temporary in memory for program</li> <li>permanent (.bash_profile, .zshrc, etc)</li> </ul> </li> <li>tokens stale</li> <li>implement known tokens automatic testing</li> <li>implement token encryption/hashing (optional)<ul> <li>if then decrypt uses env variable, at least there's only one failure point, and if env variable is exposed, then the token is not also exposed</li> </ul> </li> <li>integrate 1p CLI?</li> <li>for secure mode, keep access logs?</li> <li>github/gitlab secrets integration?</li> </ul>"},{"location":"todo/notes/#auto-validation","title":"auto validation","text":"<pre><code># todo: can add auto validation later when needed\n# [tool.poetry.group.validation]\n# optional = true\n\n# [tool.poetry.group.validation.dependencies]\n# openai = \"^0.28.1\"\n# mapbox\n# scrapestack\n# redshred\n# gradient\n# kaggle\n# cephalon\n# aws\n# huggingface?\n</code></pre>"},{"location":"todo/security/","title":"Security","text":""}]}